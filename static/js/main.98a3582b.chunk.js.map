{"version":3,"sources":["Component/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Main","useState","input","setInput","list","localStorage","getItem","JSON","parse","getData","items","setItems","editItems","setEditItems","toggleButton","setToggleButton","additem","e","map","currentElement","id","name","myNewInput","Date","getTime","toString","alert","useEffect","setItem","stringify","className","type","placeholder","value","onChange","target","onKeyPress","event","key","onClick","current","index","item_todo_edited","find","curElem","editItem","updatedItem","filter","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAsHeA,EA3GF,WAGT,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAXd,WACZ,IAAMG,EAAOC,aAAaC,QAAQ,SAClC,GAAIF,EACA,OAAOG,KAAKC,MAAMJ,GAQaK,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCV,mBAAS,IAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAwCZ,oBAAS,GAAjD,mBAAOa,EAAP,KAAqBC,EAArB,KAGMC,EAAU,SAACC,GACb,GAAKf,EAEE,GAAIA,GAASY,EAChBH,EACID,EAAMQ,KAAI,SAACC,GACP,OAAIA,EAAeC,KAAOR,EACf,2BAAKO,GAAZ,IAA4BE,KAAMnB,IAE/BiB,MAKfhB,EAAS,IACTU,EAAa,MACbE,GAAgB,OAGb,CACH,IAAMO,EAAa,CACfF,IAAI,IAAIG,MAAOC,UAAUC,WACzBJ,KAAMnB,GAEVS,EAAS,GAAD,mBAAKD,GAAL,CAAYY,KACpBnB,EAAS,SAvBTuB,MAAM,kBAyDd,OAJAC,qBAAU,WACNtB,aAAauB,QAAQ,QAASrB,KAAKsB,UAAUnB,MAC9C,CAACA,IAGA,qCACA,oBAAIoB,UAAU,UAAd,uBACI,qBAAKA,UAAU,UAAf,SACI,sBAAKA,UAAU,KAAf,UACI,uBAAOC,KAAK,OAAOD,UAAU,aAAaE,YAAY,kBAClDC,MAAO/B,EACPgC,SAAU,SAACjB,GAAD,OAAOd,EAASc,EAAEkB,OAAOF,QACnCG,WAtCR,SAACC,GACO,UAAdA,EAAMC,KACTtB,OAsCcF,EACG,mBAAGgB,UAAU,wBAAwBS,QAASvB,IAE1C,mBAAGc,UAAU,wBAAwBS,QAASvB,IAGtD,qBAAKc,UAAU,YAAf,SAEQpB,EAAMQ,KAAI,SAACsB,GACP,OACI,mCACI,sBAAKV,UAAU,WAAf,UACI,6BAAKU,EAAQnB,OACb,mBAAGS,UAAU,mBAAmBS,QAAS,kBA9ChE,SAACE,GACd,IAAMC,EAAmBhC,EAAMiC,MAAK,SAACC,GACjC,OAAOA,EAAQxB,KAAOqB,KAE1BtC,EAASuC,EAAiBrB,MAC1BR,EAAa4B,GACb1B,GAAgB,GAwCmE8B,CAASL,EAAQpB,OAChE,mBAAGU,UAAU,sBAAsBS,QAAS,kBApCjE,SAACE,GAChB,IAAMK,EAAcpC,EAAMqC,QAAO,SAAC5B,GAC9B,OAAOA,EAAeC,KAAOqB,KAEjC9B,EAASmC,GAgC6EE,CAAWR,EAAQpB,SAH1CoB,EAAQpB,oBC3FhE6B,MANf,WACE,OACC,cAAC,EAAD,KCOYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98a3582b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './Style.css'\r\n\r\n//Getting data from local storage\r\nconst getData = () => {\r\n    const list = localStorage.getItem(\"Items\");\r\n    if (list) {\r\n        return JSON.parse(list);\r\n    }\r\n}\r\n\r\nconst Main = () => {\r\n\r\n\r\n    const [input, setInput] = useState(\"\");\r\n    const [items, setItems] = useState(getData());\r\n    const [editItems, setEditItems] = useState(\"\");\r\n    const [toggleButton, setToggleButton] = useState(false);\r\n\r\n    //Adding items \r\n    const additem = (e) => {\r\n        if (!input) {\r\n            alert(\"Plz fill data\")\r\n        } else if (input && toggleButton) {\r\n            setItems(\r\n                items.map((currentElement) => {\r\n                    if (currentElement.id === editItems) {\r\n                        return { ...currentElement, name: input }\r\n                    }\r\n                    return currentElement;\r\n\r\n                })\r\n\r\n            );\r\n            setInput(\"\");\r\n            setEditItems(null);\r\n            setToggleButton(false);\r\n\r\n\r\n        } else {\r\n            const myNewInput = {\r\n                id: new Date().getTime().toString(),\r\n                name: input\r\n            }\r\n            setItems([...items, myNewInput])\r\n            setInput('');\r\n        }\r\n    }\r\n\r\n   const Handle=(event)=>{\r\n       if(event.key === 'Enter'){\r\n       additem();\r\n       }\r\n   } \r\n\r\n    // Edit Items \r\n    const editItem = (index) => {\r\n        const item_todo_edited = items.find((curElem) => {\r\n            return curElem.id === index;\r\n        });\r\n        setInput(item_todo_edited.name);\r\n        setEditItems(index);\r\n        setToggleButton(true);\r\n    };\r\n\r\n    // Deleting items\r\n\r\n    const deleteItem = (index) => {\r\n        const updatedItem = items.filter((currentElement) => {\r\n            return currentElement.id !== index;\r\n        });\r\n        setItems(updatedItem);\r\n    }\r\n\r\n    //   Adding Items to LocalStorage \r\n    useEffect(() => {\r\n        localStorage.setItem(\"Items\", JSON.stringify(items))\r\n    }, [items])\r\n\r\n    return (\r\n        <>\r\n        <h1 className=\"heading\">Todo-List</h1>\r\n            <div className=\"Maindiv\">\r\n                <div className=\"In\">\r\n                    <input type=\"text\" className=\"InputStyle\" placeholder=\"Write your list\"\r\n                        value={input}\r\n                        onChange={(e) => setInput(e.target.value)}\r\n                        onKeyPress={Handle}\r\n                    />\r\n                    {toggleButton ? (\r\n                        <i className=\"fas fa-edit addbutton\" onClick={additem}></i>)\r\n                        : (\r\n                            <i className=\"fas fa-plus addbutton\" onClick={additem}></i>\r\n                        )}\r\n\r\n                    <div className=\"showItems\">\r\n                        {\r\n                            items.map((current) => {\r\n                                return (\r\n                                    <>\r\n                                        <div className=\"eachItem\" key={current.id}>\r\n                                            <h6>{current.name}</h6>\r\n                                            <i className=\"fas fa-edit edit\" onClick={() => editItem(current.id)}></i>\r\n                                            <i className=\"fas fa-trash delete\" onClick={() => deleteItem(current.id)}></i>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import './App.css';\r\nimport Main from './Component/Main';\r\n\r\nfunction App() {\r\n  return (\r\n   <Main/> \r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}